{"version":3,"sources":["ThemeContex.js","redux/actionCreators.js","Navbar/NavbarComponent.js","redux/reducer.js","redux/Store.js","App.js","serviceWorker.js","index.js","redux/ActionTypes.js"],"names":["ThemeContext","createContext","dark","toggleMode","setCartItems","items","type","ActionTypes","payload","setProducts","setKeyword","Navbar","dispatch","useDispatch","useContext","className","name","placeholder","onChange","e","target","value","toLowerCase","to","onClick","init","products","cartItems","Keyword","reducer","state","action","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","StateProvider","children","loading","App","useState","setDark","Home","lazy","ProductDetails","Checkout","Cart","ThemeContex","Provider","isDark","fallback","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","SET_CART_ITEMS","SET_PRODUCTS","SET_SEARCH"],"mappings":"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","file":"static/js/main.373d123e.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst ThemeContext = createContext({dark:false,toggleMode:()=>{}});\r\n\r\nexport default ThemeContext;","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const setCartItems = items => {\r\n    return {\r\n        type:ActionTypes.SET_CART_ITEMS,\r\n        payload:items\r\n    }\r\n}\r\n\r\nexport const setProducts = items => {\r\n    return {\r\n        type:ActionTypes.SET_PRODUCTS,\r\n        payload:items\r\n    }\r\n}\r\n\r\nexport const setKeyword = items => {\r\n    return {\r\n        type:ActionTypes.SET_SEARCH,\r\n        payload:items\r\n    }\r\n}","import React,{useContext} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport ThemeContext from '../ThemeContex';\r\nimport {Link} from 'react-router-dom';\r\nimport {setKeyword} from '../redux/actionCreators';\r\n\r\nconst Navbar = () => {\r\n\tconst dispatch = useDispatch();\r\n\t\r\n\tconst handleChange = (e) => {\r\n\r\n\t\tdispatch(setKeyword(e.target.value.toLowerCase()));\r\n\t}\r\n\tconst {dark,toggleMode} = useContext(ThemeContext);\r\n\treturn (\r\n\t\t<>\r\n\t\t\r\n\t\t<div className=\"nav-bar row\">\r\n\t\t\t<div className=\"col-10\">\r\n\t\t\t<h3 className=\"d-inline\">My Shop </h3>\r\n\t\t\t<input name=\"search\" className=\"search-box ml-3 px-4\" placeholder=\"Type title or brand name\" onChange={handleChange} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"links\">\r\n\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t<Link to=\"/checkout\">Checkout</Link>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"d-inline-flex justify-content-end col\">\r\n\t\t\t<input type=\"checkbox\" onClick={toggleMode} className=\" \"/>{dark ? \"dark\":\"lite\"}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Navbar;","import * as ActionTypes from './ActionTypes';\r\n\r\nconst init ={\r\n    products:[],\r\n    cartItems :[],\r\n    Keyword:\"\"\r\n}\r\n\r\nconst reducer = (state=init,action) =>{\r\n    switch(action.type){\r\n        case ActionTypes.SET_CART_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems:action.payload\r\n            };\r\n        case ActionTypes.SET_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products:action.payload\r\n            };\r\n        case ActionTypes.SET_SEARCH:\r\n        return {\r\n            ...state,\r\n            Keyword:action.payload\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;\r\n","import React  from 'react';\r\nimport {createStore} from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport {persistStore,persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport reducer from './reducer';\r\n\r\nconst persistConfig = {\r\n    key:\"root\",\r\n    storage,\r\n    whitelist:[\"cartItems\"]\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig,reducer);\r\n\r\nconst store = createStore(\r\n    persistedReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\nconst persistor = persistStore(store);\r\n\r\nconst StateProvider = ({children})=>{\r\n    \r\n    return (\r\n    <Provider store={store}>\r\n        <PersistGate loading={<h5>Loading...</h5>} persistor={persistor}>\r\n            {children}\r\n        </PersistGate>\r\n    </Provider>)\r\n}\r\n\r\nexport {StateProvider}\r\n","import React, { useState, lazy,Suspense } from 'react';\nimport {BrowserRouter as Router,Route,Switch,Redirect} from 'react-router-dom';\nimport './App.css';\nimport Navbar from './Navbar/NavbarComponent';\nimport ThemeContext from './ThemeContex';\nimport {StateProvider} from './redux/Store';\n\nconst App = () => {\n\tconst [dark,setDark] = useState(false);\n\t\n\tconst toggleChange = () => {\n\t\tsetDark(isDark => !isDark)\n\t}\n\n\tconst Home = lazy(()=>import('./Home/Home'));\n\tconst ProductDetails = lazy(()=> import('./Products/ProductDetails'));\n\tconst Checkout = lazy(()=>import('./Carts/Checkout'));\n\tconst Cart = lazy(()=>import('./Carts/CartsComponent'));\n\n\treturn (\n\t\t<StateProvider>\n\t\t<ThemeContext.Provider value={{ dark:dark,toggleMode:toggleChange}}>\n\t\t<div className={`App ${dark ? \"dark\":\"\"}`}>\n\t\t<Router>\n\t\t\t<Navbar />\n\t\t\t<Suspense fallback={<div className=\"text-center\">Loading...</div>}>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/checkout\" component={Checkout } />            \n\t\t\t\t<Route path=\"/product/:productId\" component={ProductDetails }/> \n\t\t\t\t<Route path=\"/home\" component={Home} />\n\t\t\t\t<Redirect to='/home'/>          \n            </Switch>\n\t\t\t<Cart /> \n\t\t\t</Suspense>\n\t\t</Router>\n\t\t</div>\n\t\t</ThemeContext.Provider>\n\t\t</StateProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const SET_CART_ITEMS = \"SET_CART_ITEMS\";\r\nexport const SET_PRODUCTS = \"SET_PRODUCTS\";\r\nexport const SET_SEARCH = \"SET_SEARCH\";"],"sourceRoot":""}